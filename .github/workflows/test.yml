name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:run

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unit
        name: unit-tests-${{ matrix.node-version }}

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.node-version }}
        path: coverage/

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run integration tests
      run: npm run test:run -- tests/integration

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: test-results/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: test-results/

    - name: Upload E2E screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: test-results/

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Run accessibility tests
      run: npm run test:accessibility

    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-report
        path: test-results/

  performance-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Run performance tests
      run: npm run test:performance

    - name: Run benchmark tests
      run: npm run test:run -- tests/performance

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: test-results/

  cross-browser-tests:
    runs-on: ${{ matrix.os }}
    needs: e2e-tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        browser: [chromium, firefox, webkit]
        exclude:
          # WebKit is not supported on Windows
          - os: windows-latest
            browser: webkit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Build application
      run: npm run build

    - name: Run cross-browser tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        BROWSER: ${{ matrix.browser }}

    - name: Upload cross-browser results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cross-browser-${{ matrix.os }}-${{ matrix.browser }}
        path: test-results/

  security-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: |
        npx audit-ci --moderate
        
    - name: Build and analyze bundle
      run: |
        npm run build
        npx bundle-analyzer dist/assets/*.js --no-open --report bundle-analysis.json

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: bundle-analysis.json

  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, accessibility-tests, performance-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Unit Tests
        if [ -d "coverage-20.x" ]; then
          echo "## ✅ Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "Unit tests failed or coverage not generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Integration Tests
        if [ -d "integration-test-results" ]; then
          echo "## ✅ Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "Integration tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "Integration tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # E2E Tests
        if [ -d "e2e-test-results" ]; then
          echo "## ✅ E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "End-to-end tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ E2E Tests" >> $GITHUB_STEP_SUMMARY
          echo "End-to-end tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Accessibility Tests
        if [ -d "accessibility-report" ]; then
          echo "## ✅ Accessibility Tests" >> $GITHUB_STEP_SUMMARY
          echo "Accessibility tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Accessibility Tests" >> $GITHUB_STEP_SUMMARY
          echo "Accessibility tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Performance Tests
        if [ -d "performance-results" ]; then
          echo "## ✅ Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "Performance tests completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Performance Tests" >> $GITHUB_STEP_SUMMARY
          echo "Performance tests failed" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Set job status
      run: |
        if [ "${{ needs.unit-tests.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ] && \
           [ "${{ needs.e2e-tests.result }}" == "success" ] && \
           [ "${{ needs.accessibility-tests.result }}" == "success" ] && \
           [ "${{ needs.performance-tests.result }}" == "success" ]; then
          echo "All tests passed! ✅"
          exit 0
        else
          echo "Some tests failed! ❌"
          exit 1
        fi